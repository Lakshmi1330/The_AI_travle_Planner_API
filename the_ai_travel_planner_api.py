# -*- coding: utf-8 -*-
"""The_AI_travel_planner_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15KgwmYy83s5z09ixxDPDFjFI5P_GM-7d
"""

#installing dependencies
#FastAPI-send request and response
#unicorn-runs fastapi app
#langhcain-llm useage and easily with prompts
#langgrpah-multistep flow
#pydantic-defines input and output
#nest_asyncio-allow fasiapi to ru inside google colab without crashing
#pyngrok-to use outside the google colab
!pip install fastapi uvicorn langchain langgraph pydantic nest_asyncio pyngrok

!pip install langchain-openai
!pip install langgraph

from typing import TypedDict
from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph

#agent memory
class TripState(TypedDict):
  destination: str
  days: int
  itinerary: str
  packing_list: str

llm = ChatOpenAI(model="gpt-4o-mini",api_key="")

"""#creating itinerary(planning list)"""

def create_itinerary(state: TripState) -> TripState:
    prompt = f"Create a {state['days']}-day travel itinerary for a trip to {state['destination']}." #taking the question
    response = llm.invoke(prompt) # LLm is repponding for the question
    state["itinerary"] = response.content
    return state #returns the response

"""#Packing list needed"""

def suggest_packing_list(state: TripState) -> TripState:
    prompt = f"Based on this itinerary for {state['destination']}, suggest a packing list:\n{state['itinerary']}"
    response = llm.invoke(prompt)
    state["packing_list"] = response.content
    return state

"""#workflow"""

graph= StateGraph(TripState) #what is the state of the grpah

graph.add_node("create_itinerary",create_itinerary)

graph.add_node("suggest_packing_list",suggest_packing_list)

graph.set_entry_point("create_itinerary")  #starting point

graph.add_edge("create_itinerary", "suggest_packing_list")

graph.set_finish_point("suggest_packing_list")

app_graph = graph.compile()

"""#Building fast_API"""

from fastapi import FastAPI

from pydantic import BaseModel

app=FastAPI()

class TripRequest(BaseModel):
  destination:str
  days:int

@app.post("/plan-trip")
async def plan_trip(request:TripRequest):
  memory={"destination":request.destination,"days":request.days,"itinerary":"","packing_list":""}
  Result=app_graph.invoke(memory)
  return Result

"""#running FAsIAPI in colab"""

import nest_asyncio
import uvicorn
from pyngrok import ngrok

nest_asyncio.apply()
ngrok.set_auth_token("32BtS6gXH8BPj4TnrINtkj4GFCx_RXgBchBSq8Y98b3LJLPj")
ngrok_tunnel=ngrok.connect(8000)
print("Public URL:",ngrok_tunnel.public_url)

uvicorn.run(app,host="0.0.0.0",port=8000)

